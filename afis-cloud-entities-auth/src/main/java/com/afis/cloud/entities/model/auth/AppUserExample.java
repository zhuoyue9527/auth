package com.afis.cloud.entities.model.auth;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

public class AppUserExample {
    /**
     * This field was generated by www.sacool.com iBATIS builder.
     * <br>This field corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    private LinkedHashMap<String, String> orderByClauseMap;

    /**
     * This field was generated by www.sacool.com iBATIS builder.
     * <br>This field corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    private String orderByClause;

    /**
     * This field was generated by www.sacool.com iBATIS builder.
     * <br>This field corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    protected String alias;

    /**
     * This field was generated by www.sacool.com iBATIS builder.
     * <br>This field corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public AppUserExample() {
        oredCriteria = new ArrayList<Criteria>();
        orderByClauseMap = new LinkedHashMap<String, String>();
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     * @param alias The dynamic alias of the table.
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public AppUserExample(String alias) {
        this();
        this.alias = alias;
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     * @param example Another example will be copied to this.
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    protected AppUserExample(AppUserExample example) {
        this.orderByClauseMap = new LinkedHashMap<String, String>(example.orderByClauseMap);
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     * @param example Another example will be copied to this.
     * @param alias The dynamic alias of the table.
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    protected AppUserExample(AppUserExample example, String alias) {
        this(example);
        this.alias = alias;
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public AppUserExample orderById(String direction) {
        return this.orderBy("ID", direction);
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public String removeOrderById() {
        return this.removeOrderBy("ID");
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public AppUserExample orderByAppId(String direction) {
        return this.orderBy("APP_ID", direction);
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public String removeOrderByAppId() {
        return this.removeOrderBy("APP_ID");
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public AppUserExample orderByUserId(String direction) {
        return this.orderBy("USER_ID", direction);
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public String removeOrderByUserId() {
        return this.removeOrderBy("USER_ID");
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public AppUserExample orderByAppPassword(String direction) {
        return this.orderBy("APP_PASSWORD", direction);
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public String removeOrderByAppPassword() {
        return this.removeOrderBy("APP_PASSWORD");
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public AppUserExample orderByWarrantPermit(String direction) {
        return this.orderBy("WARRANT_PERMIT", direction);
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public String removeOrderByWarrantPermit() {
        return this.removeOrderBy("WARRANT_PERMIT");
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public AppUserExample orderByWarrant(String direction) {
        return this.orderBy("WARRANT", direction);
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public String removeOrderByWarrant() {
        return this.removeOrderBy("WARRANT");
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public AppUserExample orderByOperateAppId(String direction) {
        return this.orderBy("OPERATE_APP_ID", direction);
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public String removeOrderByOperateAppId() {
        return this.removeOrderBy("OPERATE_APP_ID");
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public AppUserExample orderByOperator(String direction) {
        return this.orderBy("OPERATOR", direction);
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public String removeOrderByOperator() {
        return this.removeOrderBy("OPERATOR");
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public AppUserExample orderByOperateTime(String direction) {
        return this.orderBy("OPERATE_TIME", direction);
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public String removeOrderByOperateTime() {
        return this.removeOrderBy("OPERATE_TIME");
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public AppUserExample orderBy(String field, String direction) {
        boolean have = orderByClauseMap.containsKey(field);
        String old = orderByClauseMap.put(field, direction);
        if(have && (old == null ? direction != null : !old.equals(direction))) orderByClause = null;
        return this;
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public String removeOrderBy(String field) {
        if(orderByClauseMap.containsKey(field)){
            orderByClause = null;
            return orderByClauseMap.remove(field);
        }
        return null;
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public void clearOrderByClause() {
        if(!orderByClauseMap.isEmpty()){
            orderByClause = null;
            orderByClauseMap.clear();
        }
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public String getOrderByClause() {
        if(orderByClause == null){
            StringBuilder sb = new StringBuilder();
            Iterator<Entry<String, String>> iterator = orderByClauseMap.entrySet().iterator();
            boolean aliasEmpty = this.alias == null || this.alias.isEmpty();
            while(iterator.hasNext()){
                Entry<String, String> entry = iterator.next();
                String key = entry.getKey();
                String value = entry.getValue();
                boolean keyEmpty = key == null || key.isEmpty();
                boolean valueEmpty = value == null || value.isEmpty();
                if(!keyEmpty){
                    if(!aliasEmpty){
                        sb.append(this.alias);
                        sb.append(".");
                    }
                    sb.append(entry.getKey());
                }
                if(!valueEmpty){
                    if(!keyEmpty) sb.append(" ");
                    sb.append(entry.getValue());
                }
                if(!keyEmpty || !valueEmpty) sb.append(", ");
            }
            if(sb.length() != 0) sb.setLength(sb.length() - 2);
            orderByClause = sb.toString();
        }
        return orderByClause;
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     * @param alias The dynamic alias of the table.
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public void setAlias(String alias) {
        this.alias = alias;
        orderByClause = null;
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public String getAlias() {
        return alias;
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if(oredCriteria.size() == 0) oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    protected Criteria createCriteriaInternal() {
        return new Criteria();
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public void clearOredCriteria() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by www.sacool.com iBATIS builder.
     * <br>This class corresponds to the database table T_A_APP_USER
     *
     * @sacoolbuildergenerated 2018-11-08 16:49:54
     * @author sacool ibatis builder Team
     */
    public static class Criteria {
        protected List<String> criteriaWithSqlSnippetValue;

        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithSqlSnippetValue = new ArrayList<String>();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithSqlSnippetValue.size() > 0
                || criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithSqlSnippetValue() {
            return criteriaWithSqlSnippetValue;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            List<Map<String, Object>> list = null;
            String valueKey = "value";
            if(value.getClass().isArray()) {
                if(Array.getLength(value) == 0) throw new RuntimeException("Value array for " + property + " cannot be empty");
                list = criteriaWithListValue;
                valueKey = "values";
            } else list = criteriaWithSingleValue;
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put(valueKey, value);
            list.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andSQLSnippet(String sqlSnippet) {
            if(sqlSnippet == null){
                throw new RuntimeException("Value for sqlSnippet cannot be null");
            }
            criteriaWithSqlSnippetValue.add(sqlSnippet);
            return this;
        }

        public Criteria andIdIsNull() {
            addCriterion("ID IS NULL");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("ID IS NOT NULL");
            return this;
        }

        public Criteria andIdEqualTo(long value) {
            addCriterion("ID =", new Long(value), "id");
            return this;
        }

        public Criteria andIdNotEqualTo(long value) {
            addCriterion("ID <>", new Long(value), "id");
            return this;
        }

        public Criteria andIdGreaterThan(long value) {
            addCriterion("ID >", new Long(value), "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(long value) {
            addCriterion("ID >=", new Long(value), "id");
            return this;
        }

        public Criteria andIdLessThan(long value) {
            addCriterion("ID <", new Long(value), "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(long value) {
            addCriterion("ID <=", new Long(value), "id");
            return this;
        }

        public Criteria andIdIn(long[] values) {
            addCriterion("ID IN", values, "id");
            return this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("ID IN", values, "id");
            return this;
        }

        public Criteria andIdNotIn(long[] values) {
            addCriterion("ID NOT IN", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("ID NOT IN", values, "id");
            return this;
        }

        public Criteria andIdBetween(long value1, long value2) {
            addCriterion("ID BETWEEN", new Long(value1), new Long(value2), "id");
            return this;
        }

        public Criteria andIdNotBetween(long value1, long value2) {
            addCriterion("ID NOT BETWEEN", new Long(value1), new Long(value2), "id");
            return this;
        }

        public Criteria andAppIdIsNull() {
            addCriterion("APP_ID IS NULL");
            return this;
        }

        public Criteria andAppIdIsNotNull() {
            addCriterion("APP_ID IS NOT NULL");
            return this;
        }

        public Criteria andAppIdEqualTo(long value) {
            addCriterion("APP_ID =", new Long(value), "appId");
            return this;
        }

        public Criteria andAppIdNotEqualTo(long value) {
            addCriterion("APP_ID <>", new Long(value), "appId");
            return this;
        }

        public Criteria andAppIdGreaterThan(long value) {
            addCriterion("APP_ID >", new Long(value), "appId");
            return this;
        }

        public Criteria andAppIdGreaterThanOrEqualTo(long value) {
            addCriterion("APP_ID >=", new Long(value), "appId");
            return this;
        }

        public Criteria andAppIdLessThan(long value) {
            addCriterion("APP_ID <", new Long(value), "appId");
            return this;
        }

        public Criteria andAppIdLessThanOrEqualTo(long value) {
            addCriterion("APP_ID <=", new Long(value), "appId");
            return this;
        }

        public Criteria andAppIdIn(long[] values) {
            addCriterion("APP_ID IN", values, "appId");
            return this;
        }

        public Criteria andAppIdIn(List<Long> values) {
            addCriterion("APP_ID IN", values, "appId");
            return this;
        }

        public Criteria andAppIdNotIn(long[] values) {
            addCriterion("APP_ID NOT IN", values, "appId");
            return this;
        }

        public Criteria andAppIdNotIn(List<Long> values) {
            addCriterion("APP_ID NOT IN", values, "appId");
            return this;
        }

        public Criteria andAppIdBetween(long value1, long value2) {
            addCriterion("APP_ID BETWEEN", new Long(value1), new Long(value2), "appId");
            return this;
        }

        public Criteria andAppIdNotBetween(long value1, long value2) {
            addCriterion("APP_ID NOT BETWEEN", new Long(value1), new Long(value2), "appId");
            return this;
        }

        public Criteria andUserIdIsNull() {
            addCriterion("USER_ID IS NULL");
            return this;
        }

        public Criteria andUserIdIsNotNull() {
            addCriterion("USER_ID IS NOT NULL");
            return this;
        }

        public Criteria andUserIdEqualTo(long value) {
            addCriterion("USER_ID =", new Long(value), "userId");
            return this;
        }

        public Criteria andUserIdNotEqualTo(long value) {
            addCriterion("USER_ID <>", new Long(value), "userId");
            return this;
        }

        public Criteria andUserIdGreaterThan(long value) {
            addCriterion("USER_ID >", new Long(value), "userId");
            return this;
        }

        public Criteria andUserIdGreaterThanOrEqualTo(long value) {
            addCriterion("USER_ID >=", new Long(value), "userId");
            return this;
        }

        public Criteria andUserIdLessThan(long value) {
            addCriterion("USER_ID <", new Long(value), "userId");
            return this;
        }

        public Criteria andUserIdLessThanOrEqualTo(long value) {
            addCriterion("USER_ID <=", new Long(value), "userId");
            return this;
        }

        public Criteria andUserIdIn(long[] values) {
            addCriterion("USER_ID IN", values, "userId");
            return this;
        }

        public Criteria andUserIdIn(List<Long> values) {
            addCriterion("USER_ID IN", values, "userId");
            return this;
        }

        public Criteria andUserIdNotIn(long[] values) {
            addCriterion("USER_ID NOT IN", values, "userId");
            return this;
        }

        public Criteria andUserIdNotIn(List<Long> values) {
            addCriterion("USER_ID NOT IN", values, "userId");
            return this;
        }

        public Criteria andUserIdBetween(long value1, long value2) {
            addCriterion("USER_ID BETWEEN", new Long(value1), new Long(value2), "userId");
            return this;
        }

        public Criteria andUserIdNotBetween(long value1, long value2) {
            addCriterion("USER_ID NOT BETWEEN", new Long(value1), new Long(value2), "userId");
            return this;
        }

        public Criteria andAppPasswordIsNull() {
            addCriterion("APP_PASSWORD IS NULL");
            return this;
        }

        public Criteria andAppPasswordIsNotNull() {
            addCriterion("APP_PASSWORD IS NOT NULL");
            return this;
        }

        public Criteria andAppPasswordEqualTo(String value) {
            addCriterion("APP_PASSWORD =", value, "appPassword");
            return this;
        }

        public Criteria andAppPasswordNotEqualTo(String value) {
            addCriterion("APP_PASSWORD <>", value, "appPassword");
            return this;
        }

        public Criteria andAppPasswordGreaterThan(String value) {
            addCriterion("APP_PASSWORD >", value, "appPassword");
            return this;
        }

        public Criteria andAppPasswordGreaterThanOrEqualTo(String value) {
            addCriterion("APP_PASSWORD >=", value, "appPassword");
            return this;
        }

        public Criteria andAppPasswordLessThan(String value) {
            addCriterion("APP_PASSWORD <", value, "appPassword");
            return this;
        }

        public Criteria andAppPasswordLessThanOrEqualTo(String value) {
            addCriterion("APP_PASSWORD <=", value, "appPassword");
            return this;
        }

        public Criteria andAppPasswordLike(String value) {
            addCriterion("APP_PASSWORD LIKE", value, "appPassword");
            return this;
        }

        public Criteria andAppPasswordNotLike(String value) {
            addCriterion("APP_PASSWORD NOT LIKE", value, "appPassword");
            return this;
        }

        public Criteria andAppPasswordIn(String[] values) {
            addCriterion("APP_PASSWORD IN", values, "appPassword");
            return this;
        }

        public Criteria andAppPasswordIn(List<String> values) {
            addCriterion("APP_PASSWORD IN", values, "appPassword");
            return this;
        }

        public Criteria andAppPasswordNotIn(String[] values) {
            addCriterion("APP_PASSWORD NOT IN", values, "appPassword");
            return this;
        }

        public Criteria andAppPasswordNotIn(List<String> values) {
            addCriterion("APP_PASSWORD NOT IN", values, "appPassword");
            return this;
        }

        public Criteria andAppPasswordBetween(String value1, String value2) {
            addCriterion("APP_PASSWORD BETWEEN", value1, value2, "appPassword");
            return this;
        }

        public Criteria andAppPasswordNotBetween(String value1, String value2) {
            addCriterion("APP_PASSWORD NOT BETWEEN", value1, value2, "appPassword");
            return this;
        }

        public Criteria andWarrantPermitIsNull() {
            addCriterion("WARRANT_PERMIT IS NULL");
            return this;
        }

        public Criteria andWarrantPermitIsNotNull() {
            addCriterion("WARRANT_PERMIT IS NOT NULL");
            return this;
        }

        public Criteria andWarrantPermitEqualTo(String value) {
            addCriterion("WARRANT_PERMIT =", value, "warrantPermit");
            return this;
        }

        public Criteria andWarrantPermitNotEqualTo(String value) {
            addCriterion("WARRANT_PERMIT <>", value, "warrantPermit");
            return this;
        }

        public Criteria andWarrantPermitGreaterThan(String value) {
            addCriterion("WARRANT_PERMIT >", value, "warrantPermit");
            return this;
        }

        public Criteria andWarrantPermitGreaterThanOrEqualTo(String value) {
            addCriterion("WARRANT_PERMIT >=", value, "warrantPermit");
            return this;
        }

        public Criteria andWarrantPermitLessThan(String value) {
            addCriterion("WARRANT_PERMIT <", value, "warrantPermit");
            return this;
        }

        public Criteria andWarrantPermitLessThanOrEqualTo(String value) {
            addCriterion("WARRANT_PERMIT <=", value, "warrantPermit");
            return this;
        }

        public Criteria andWarrantPermitLike(String value) {
            addCriterion("WARRANT_PERMIT LIKE", value, "warrantPermit");
            return this;
        }

        public Criteria andWarrantPermitNotLike(String value) {
            addCriterion("WARRANT_PERMIT NOT LIKE", value, "warrantPermit");
            return this;
        }

        public Criteria andWarrantPermitIn(String[] values) {
            addCriterion("WARRANT_PERMIT IN", values, "warrantPermit");
            return this;
        }

        public Criteria andWarrantPermitIn(List<String> values) {
            addCriterion("WARRANT_PERMIT IN", values, "warrantPermit");
            return this;
        }

        public Criteria andWarrantPermitNotIn(String[] values) {
            addCriterion("WARRANT_PERMIT NOT IN", values, "warrantPermit");
            return this;
        }

        public Criteria andWarrantPermitNotIn(List<String> values) {
            addCriterion("WARRANT_PERMIT NOT IN", values, "warrantPermit");
            return this;
        }

        public Criteria andWarrantPermitBetween(String value1, String value2) {
            addCriterion("WARRANT_PERMIT BETWEEN", value1, value2, "warrantPermit");
            return this;
        }

        public Criteria andWarrantPermitNotBetween(String value1, String value2) {
            addCriterion("WARRANT_PERMIT NOT BETWEEN", value1, value2, "warrantPermit");
            return this;
        }

        public Criteria andWarrantIsNull() {
            addCriterion("WARRANT IS NULL");
            return this;
        }

        public Criteria andWarrantIsNotNull() {
            addCriterion("WARRANT IS NOT NULL");
            return this;
        }

        public Criteria andWarrantEqualTo(String value) {
            addCriterion("WARRANT =", value, "warrant");
            return this;
        }

        public Criteria andWarrantNotEqualTo(String value) {
            addCriterion("WARRANT <>", value, "warrant");
            return this;
        }

        public Criteria andWarrantGreaterThan(String value) {
            addCriterion("WARRANT >", value, "warrant");
            return this;
        }

        public Criteria andWarrantGreaterThanOrEqualTo(String value) {
            addCriterion("WARRANT >=", value, "warrant");
            return this;
        }

        public Criteria andWarrantLessThan(String value) {
            addCriterion("WARRANT <", value, "warrant");
            return this;
        }

        public Criteria andWarrantLessThanOrEqualTo(String value) {
            addCriterion("WARRANT <=", value, "warrant");
            return this;
        }

        public Criteria andWarrantLike(String value) {
            addCriterion("WARRANT LIKE", value, "warrant");
            return this;
        }

        public Criteria andWarrantNotLike(String value) {
            addCriterion("WARRANT NOT LIKE", value, "warrant");
            return this;
        }

        public Criteria andWarrantIn(String[] values) {
            addCriterion("WARRANT IN", values, "warrant");
            return this;
        }

        public Criteria andWarrantIn(List<String> values) {
            addCriterion("WARRANT IN", values, "warrant");
            return this;
        }

        public Criteria andWarrantNotIn(String[] values) {
            addCriterion("WARRANT NOT IN", values, "warrant");
            return this;
        }

        public Criteria andWarrantNotIn(List<String> values) {
            addCriterion("WARRANT NOT IN", values, "warrant");
            return this;
        }

        public Criteria andWarrantBetween(String value1, String value2) {
            addCriterion("WARRANT BETWEEN", value1, value2, "warrant");
            return this;
        }

        public Criteria andWarrantNotBetween(String value1, String value2) {
            addCriterion("WARRANT NOT BETWEEN", value1, value2, "warrant");
            return this;
        }

        public Criteria andOperateAppIdIsNull() {
            addCriterion("OPERATE_APP_ID IS NULL");
            return this;
        }

        public Criteria andOperateAppIdIsNotNull() {
            addCriterion("OPERATE_APP_ID IS NOT NULL");
            return this;
        }

        public Criteria andOperateAppIdEqualTo(Long value) {
            addCriterion("OPERATE_APP_ID =", value, "operateAppId");
            return this;
        }

        public Criteria andOperateAppIdNotEqualTo(Long value) {
            addCriterion("OPERATE_APP_ID <>", value, "operateAppId");
            return this;
        }

        public Criteria andOperateAppIdGreaterThan(Long value) {
            addCriterion("OPERATE_APP_ID >", value, "operateAppId");
            return this;
        }

        public Criteria andOperateAppIdGreaterThanOrEqualTo(Long value) {
            addCriterion("OPERATE_APP_ID >=", value, "operateAppId");
            return this;
        }

        public Criteria andOperateAppIdLessThan(Long value) {
            addCriterion("OPERATE_APP_ID <", value, "operateAppId");
            return this;
        }

        public Criteria andOperateAppIdLessThanOrEqualTo(Long value) {
            addCriterion("OPERATE_APP_ID <=", value, "operateAppId");
            return this;
        }

        public Criteria andOperateAppIdIn(Long[] values) {
            addCriterion("OPERATE_APP_ID IN", values, "operateAppId");
            return this;
        }

        public Criteria andOperateAppIdIn(List<Long> values) {
            addCriterion("OPERATE_APP_ID IN", values, "operateAppId");
            return this;
        }

        public Criteria andOperateAppIdNotIn(Long[] values) {
            addCriterion("OPERATE_APP_ID NOT IN", values, "operateAppId");
            return this;
        }

        public Criteria andOperateAppIdNotIn(List<Long> values) {
            addCriterion("OPERATE_APP_ID NOT IN", values, "operateAppId");
            return this;
        }

        public Criteria andOperateAppIdBetween(Long value1, Long value2) {
            addCriterion("OPERATE_APP_ID BETWEEN", value1, value2, "operateAppId");
            return this;
        }

        public Criteria andOperateAppIdNotBetween(Long value1, Long value2) {
            addCriterion("OPERATE_APP_ID NOT BETWEEN", value1, value2, "operateAppId");
            return this;
        }

        public Criteria andOperatorIsNull() {
            addCriterion("OPERATOR IS NULL");
            return this;
        }

        public Criteria andOperatorIsNotNull() {
            addCriterion("OPERATOR IS NOT NULL");
            return this;
        }

        public Criteria andOperatorEqualTo(Long value) {
            addCriterion("OPERATOR =", value, "operator");
            return this;
        }

        public Criteria andOperatorNotEqualTo(Long value) {
            addCriterion("OPERATOR <>", value, "operator");
            return this;
        }

        public Criteria andOperatorGreaterThan(Long value) {
            addCriterion("OPERATOR >", value, "operator");
            return this;
        }

        public Criteria andOperatorGreaterThanOrEqualTo(Long value) {
            addCriterion("OPERATOR >=", value, "operator");
            return this;
        }

        public Criteria andOperatorLessThan(Long value) {
            addCriterion("OPERATOR <", value, "operator");
            return this;
        }

        public Criteria andOperatorLessThanOrEqualTo(Long value) {
            addCriterion("OPERATOR <=", value, "operator");
            return this;
        }

        public Criteria andOperatorIn(Long[] values) {
            addCriterion("OPERATOR IN", values, "operator");
            return this;
        }

        public Criteria andOperatorIn(List<Long> values) {
            addCriterion("OPERATOR IN", values, "operator");
            return this;
        }

        public Criteria andOperatorNotIn(Long[] values) {
            addCriterion("OPERATOR NOT IN", values, "operator");
            return this;
        }

        public Criteria andOperatorNotIn(List<Long> values) {
            addCriterion("OPERATOR NOT IN", values, "operator");
            return this;
        }

        public Criteria andOperatorBetween(Long value1, Long value2) {
            addCriterion("OPERATOR BETWEEN", value1, value2, "operator");
            return this;
        }

        public Criteria andOperatorNotBetween(Long value1, Long value2) {
            addCriterion("OPERATOR NOT BETWEEN", value1, value2, "operator");
            return this;
        }

        public Criteria andOperateTimeIsNull() {
            addCriterion("OPERATE_TIME IS NULL");
            return this;
        }

        public Criteria andOperateTimeIsNotNull() {
            addCriterion("OPERATE_TIME IS NOT NULL");
            return this;
        }

        public Criteria andOperateTimeEqualTo(Date value) {
            addCriterion("OPERATE_TIME =", value, "operateTime");
            return this;
        }

        public Criteria andOperateTimeNotEqualTo(Date value) {
            addCriterion("OPERATE_TIME <>", value, "operateTime");
            return this;
        }

        public Criteria andOperateTimeGreaterThan(Date value) {
            addCriterion("OPERATE_TIME >", value, "operateTime");
            return this;
        }

        public Criteria andOperateTimeGreaterThanOrEqualTo(Date value) {
            addCriterion("OPERATE_TIME >=", value, "operateTime");
            return this;
        }

        public Criteria andOperateTimeLessThan(Date value) {
            addCriterion("OPERATE_TIME <", value, "operateTime");
            return this;
        }

        public Criteria andOperateTimeLessThanOrEqualTo(Date value) {
            addCriterion("OPERATE_TIME <=", value, "operateTime");
            return this;
        }

        public Criteria andOperateTimeIn(Date[] values) {
            addCriterion("OPERATE_TIME IN", values, "operateTime");
            return this;
        }

        public Criteria andOperateTimeIn(List<Date> values) {
            addCriterion("OPERATE_TIME IN", values, "operateTime");
            return this;
        }

        public Criteria andOperateTimeNotIn(Date[] values) {
            addCriterion("OPERATE_TIME NOT IN", values, "operateTime");
            return this;
        }

        public Criteria andOperateTimeNotIn(List<Date> values) {
            addCriterion("OPERATE_TIME NOT IN", values, "operateTime");
            return this;
        }

        public Criteria andOperateTimeBetween(Date value1, Date value2) {
            addCriterion("OPERATE_TIME BETWEEN", value1, value2, "operateTime");
            return this;
        }

        public Criteria andOperateTimeNotBetween(Date value1, Date value2) {
            addCriterion("OPERATE_TIME NOT BETWEEN", value1, value2, "operateTime");
            return this;
        }
    }
}