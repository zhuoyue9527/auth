package com.afis.cloud.entities.model.auth;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

public class MenuExample {
    /**
     * This field was generated by www.sacool.com iBATIS builder.
     * <br>This field corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    private LinkedHashMap<String, String> orderByClauseMap;

    /**
     * This field was generated by www.sacool.com iBATIS builder.
     * <br>This field corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    private String orderByClause;

    /**
     * This field was generated by www.sacool.com iBATIS builder.
     * <br>This field corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    protected String alias;

    /**
     * This field was generated by www.sacool.com iBATIS builder.
     * <br>This field corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public MenuExample() {
        oredCriteria = new ArrayList<Criteria>();
        orderByClauseMap = new LinkedHashMap<String, String>();
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     * @param alias The dynamic alias of the table.
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public MenuExample(String alias) {
        this();
        this.alias = alias;
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     * @param example Another example will be copied to this.
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    protected MenuExample(MenuExample example) {
        this.orderByClauseMap = new LinkedHashMap<String, String>(example.orderByClauseMap);
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     * @param example Another example will be copied to this.
     * @param alias The dynamic alias of the table.
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    protected MenuExample(MenuExample example, String alias) {
        this(example);
        this.alias = alias;
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public MenuExample orderById(String direction) {
        return this.orderBy("ID", direction);
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public String removeOrderById() {
        return this.removeOrderBy("ID");
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public MenuExample orderByName(String direction) {
        return this.orderBy("NAME", direction);
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public String removeOrderByName() {
        return this.removeOrderBy("NAME");
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public MenuExample orderByIconPath(String direction) {
        return this.orderBy("ICON_PATH", direction);
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public String removeOrderByIconPath() {
        return this.removeOrderBy("ICON_PATH");
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public MenuExample orderByParentId(String direction) {
        return this.orderBy("PARENT_ID", direction);
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public String removeOrderByParentId() {
        return this.removeOrderBy("PARENT_ID");
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public MenuExample orderByOrdered(String direction) {
        return this.orderBy("ORDERED", direction);
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public String removeOrderByOrdered() {
        return this.removeOrderBy("ORDERED");
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public MenuExample orderByMenuPath(String direction) {
        return this.orderBy("MENU_PATH", direction);
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public String removeOrderByMenuPath() {
        return this.removeOrderBy("MENU_PATH");
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public MenuExample orderByRemark(String direction) {
        return this.orderBy("REMARK", direction);
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public String removeOrderByRemark() {
        return this.removeOrderBy("REMARK");
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public MenuExample orderBy(String field, String direction) {
        boolean have = orderByClauseMap.containsKey(field);
        String old = orderByClauseMap.put(field, direction);
        if(have && (old == null ? direction != null : !old.equals(direction))) orderByClause = null;
        return this;
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public String removeOrderBy(String field) {
        if(orderByClauseMap.containsKey(field)){
            orderByClause = null;
            return orderByClauseMap.remove(field);
        }
        return null;
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public void clearOrderByClause() {
        if(!orderByClauseMap.isEmpty()){
            orderByClause = null;
            orderByClauseMap.clear();
        }
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public String getOrderByClause() {
        if(orderByClause == null){
            StringBuilder sb = new StringBuilder();
            Iterator<Entry<String, String>> iterator = orderByClauseMap.entrySet().iterator();
            boolean aliasEmpty = this.alias == null || this.alias.isEmpty();
            while(iterator.hasNext()){
                Entry<String, String> entry = iterator.next();
                String key = entry.getKey();
                String value = entry.getValue();
                boolean keyEmpty = key == null || key.isEmpty();
                boolean valueEmpty = value == null || value.isEmpty();
                if(!keyEmpty){
                    if(!aliasEmpty){
                        sb.append(this.alias);
                        sb.append(".");
                    }
                    sb.append(entry.getKey());
                }
                if(!valueEmpty){
                    if(!keyEmpty) sb.append(" ");
                    sb.append(entry.getValue());
                }
                if(!keyEmpty || !valueEmpty) sb.append(", ");
            }
            if(sb.length() != 0) sb.setLength(sb.length() - 2);
            orderByClause = sb.toString();
        }
        return orderByClause;
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     * @param alias The dynamic alias of the table.
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public void setAlias(String alias) {
        this.alias = alias;
        orderByClause = null;
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public String getAlias() {
        return alias;
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if(oredCriteria.size() == 0) oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    protected Criteria createCriteriaInternal() {
        return new Criteria();
    }

    /**
     * This method was generated by www.sacool.com iBATIS builder.
     * <br>This method corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public void clearOredCriteria() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by www.sacool.com iBATIS builder.
     * <br>This class corresponds to the database table T_AI_MENU
     *
     * @sacoolbuildergenerated 2018-10-31 11:01:44
     * @author sacool ibatis builder Team
     */
    public static class Criteria {
        protected List<String> criteriaWithSqlSnippetValue;

        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithSqlSnippetValue = new ArrayList<String>();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithSqlSnippetValue.size() > 0
                || criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithSqlSnippetValue() {
            return criteriaWithSqlSnippetValue;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            List<Map<String, Object>> list = null;
            String valueKey = "value";
            if(value.getClass().isArray()) {
                if(Array.getLength(value) == 0) throw new RuntimeException("Value array for " + property + " cannot be empty");
                list = criteriaWithListValue;
                valueKey = "values";
            } else list = criteriaWithSingleValue;
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put(valueKey, value);
            list.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andSQLSnippet(String sqlSnippet) {
            if(sqlSnippet == null){
                throw new RuntimeException("Value for sqlSnippet cannot be null");
            }
            criteriaWithSqlSnippetValue.add(sqlSnippet);
            return this;
        }

        public Criteria andIdIsNull() {
            addCriterion("ID IS NULL");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("ID IS NOT NULL");
            return this;
        }

        public Criteria andIdEqualTo(long value) {
            addCriterion("ID =", new Long(value), "id");
            return this;
        }

        public Criteria andIdNotEqualTo(long value) {
            addCriterion("ID <>", new Long(value), "id");
            return this;
        }

        public Criteria andIdGreaterThan(long value) {
            addCriterion("ID >", new Long(value), "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(long value) {
            addCriterion("ID >=", new Long(value), "id");
            return this;
        }

        public Criteria andIdLessThan(long value) {
            addCriterion("ID <", new Long(value), "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(long value) {
            addCriterion("ID <=", new Long(value), "id");
            return this;
        }

        public Criteria andIdIn(long[] values) {
            addCriterion("ID IN", values, "id");
            return this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("ID IN", values, "id");
            return this;
        }

        public Criteria andIdNotIn(long[] values) {
            addCriterion("ID NOT IN", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("ID NOT IN", values, "id");
            return this;
        }

        public Criteria andIdBetween(long value1, long value2) {
            addCriterion("ID BETWEEN", new Long(value1), new Long(value2), "id");
            return this;
        }

        public Criteria andIdNotBetween(long value1, long value2) {
            addCriterion("ID NOT BETWEEN", new Long(value1), new Long(value2), "id");
            return this;
        }

        public Criteria andNameIsNull() {
            addCriterion("NAME IS NULL");
            return this;
        }

        public Criteria andNameIsNotNull() {
            addCriterion("NAME IS NOT NULL");
            return this;
        }

        public Criteria andNameEqualTo(String value) {
            addCriterion("NAME =", value, "name");
            return this;
        }

        public Criteria andNameNotEqualTo(String value) {
            addCriterion("NAME <>", value, "name");
            return this;
        }

        public Criteria andNameGreaterThan(String value) {
            addCriterion("NAME >", value, "name");
            return this;
        }

        public Criteria andNameGreaterThanOrEqualTo(String value) {
            addCriterion("NAME >=", value, "name");
            return this;
        }

        public Criteria andNameLessThan(String value) {
            addCriterion("NAME <", value, "name");
            return this;
        }

        public Criteria andNameLessThanOrEqualTo(String value) {
            addCriterion("NAME <=", value, "name");
            return this;
        }

        public Criteria andNameLike(String value) {
            addCriterion("NAME LIKE", value, "name");
            return this;
        }

        public Criteria andNameNotLike(String value) {
            addCriterion("NAME NOT LIKE", value, "name");
            return this;
        }

        public Criteria andNameIn(String[] values) {
            addCriterion("NAME IN", values, "name");
            return this;
        }

        public Criteria andNameIn(List<String> values) {
            addCriterion("NAME IN", values, "name");
            return this;
        }

        public Criteria andNameNotIn(String[] values) {
            addCriterion("NAME NOT IN", values, "name");
            return this;
        }

        public Criteria andNameNotIn(List<String> values) {
            addCriterion("NAME NOT IN", values, "name");
            return this;
        }

        public Criteria andNameBetween(String value1, String value2) {
            addCriterion("NAME BETWEEN", value1, value2, "name");
            return this;
        }

        public Criteria andNameNotBetween(String value1, String value2) {
            addCriterion("NAME NOT BETWEEN", value1, value2, "name");
            return this;
        }

        public Criteria andIconPathIsNull() {
            addCriterion("ICON_PATH IS NULL");
            return this;
        }

        public Criteria andIconPathIsNotNull() {
            addCriterion("ICON_PATH IS NOT NULL");
            return this;
        }

        public Criteria andIconPathEqualTo(String value) {
            addCriterion("ICON_PATH =", value, "iconPath");
            return this;
        }

        public Criteria andIconPathNotEqualTo(String value) {
            addCriterion("ICON_PATH <>", value, "iconPath");
            return this;
        }

        public Criteria andIconPathGreaterThan(String value) {
            addCriterion("ICON_PATH >", value, "iconPath");
            return this;
        }

        public Criteria andIconPathGreaterThanOrEqualTo(String value) {
            addCriterion("ICON_PATH >=", value, "iconPath");
            return this;
        }

        public Criteria andIconPathLessThan(String value) {
            addCriterion("ICON_PATH <", value, "iconPath");
            return this;
        }

        public Criteria andIconPathLessThanOrEqualTo(String value) {
            addCriterion("ICON_PATH <=", value, "iconPath");
            return this;
        }

        public Criteria andIconPathLike(String value) {
            addCriterion("ICON_PATH LIKE", value, "iconPath");
            return this;
        }

        public Criteria andIconPathNotLike(String value) {
            addCriterion("ICON_PATH NOT LIKE", value, "iconPath");
            return this;
        }

        public Criteria andIconPathIn(String[] values) {
            addCriterion("ICON_PATH IN", values, "iconPath");
            return this;
        }

        public Criteria andIconPathIn(List<String> values) {
            addCriterion("ICON_PATH IN", values, "iconPath");
            return this;
        }

        public Criteria andIconPathNotIn(String[] values) {
            addCriterion("ICON_PATH NOT IN", values, "iconPath");
            return this;
        }

        public Criteria andIconPathNotIn(List<String> values) {
            addCriterion("ICON_PATH NOT IN", values, "iconPath");
            return this;
        }

        public Criteria andIconPathBetween(String value1, String value2) {
            addCriterion("ICON_PATH BETWEEN", value1, value2, "iconPath");
            return this;
        }

        public Criteria andIconPathNotBetween(String value1, String value2) {
            addCriterion("ICON_PATH NOT BETWEEN", value1, value2, "iconPath");
            return this;
        }

        public Criteria andParentIdIsNull() {
            addCriterion("PARENT_ID IS NULL");
            return this;
        }

        public Criteria andParentIdIsNotNull() {
            addCriterion("PARENT_ID IS NOT NULL");
            return this;
        }

        public Criteria andParentIdEqualTo(long value) {
            addCriterion("PARENT_ID =", new Long(value), "parentId");
            return this;
        }

        public Criteria andParentIdNotEqualTo(long value) {
            addCriterion("PARENT_ID <>", new Long(value), "parentId");
            return this;
        }

        public Criteria andParentIdGreaterThan(long value) {
            addCriterion("PARENT_ID >", new Long(value), "parentId");
            return this;
        }

        public Criteria andParentIdGreaterThanOrEqualTo(long value) {
            addCriterion("PARENT_ID >=", new Long(value), "parentId");
            return this;
        }

        public Criteria andParentIdLessThan(long value) {
            addCriterion("PARENT_ID <", new Long(value), "parentId");
            return this;
        }

        public Criteria andParentIdLessThanOrEqualTo(long value) {
            addCriterion("PARENT_ID <=", new Long(value), "parentId");
            return this;
        }

        public Criteria andParentIdIn(long[] values) {
            addCriterion("PARENT_ID IN", values, "parentId");
            return this;
        }

        public Criteria andParentIdIn(List<Long> values) {
            addCriterion("PARENT_ID IN", values, "parentId");
            return this;
        }

        public Criteria andParentIdNotIn(long[] values) {
            addCriterion("PARENT_ID NOT IN", values, "parentId");
            return this;
        }

        public Criteria andParentIdNotIn(List<Long> values) {
            addCriterion("PARENT_ID NOT IN", values, "parentId");
            return this;
        }

        public Criteria andParentIdBetween(long value1, long value2) {
            addCriterion("PARENT_ID BETWEEN", new Long(value1), new Long(value2), "parentId");
            return this;
        }

        public Criteria andParentIdNotBetween(long value1, long value2) {
            addCriterion("PARENT_ID NOT BETWEEN", new Long(value1), new Long(value2), "parentId");
            return this;
        }

        public Criteria andOrderedIsNull() {
            addCriterion("ORDERED IS NULL");
            return this;
        }

        public Criteria andOrderedIsNotNull() {
            addCriterion("ORDERED IS NOT NULL");
            return this;
        }

        public Criteria andOrderedEqualTo(long value) {
            addCriterion("ORDERED =", new Long(value), "ordered");
            return this;
        }

        public Criteria andOrderedNotEqualTo(long value) {
            addCriterion("ORDERED <>", new Long(value), "ordered");
            return this;
        }

        public Criteria andOrderedGreaterThan(long value) {
            addCriterion("ORDERED >", new Long(value), "ordered");
            return this;
        }

        public Criteria andOrderedGreaterThanOrEqualTo(long value) {
            addCriterion("ORDERED >=", new Long(value), "ordered");
            return this;
        }

        public Criteria andOrderedLessThan(long value) {
            addCriterion("ORDERED <", new Long(value), "ordered");
            return this;
        }

        public Criteria andOrderedLessThanOrEqualTo(long value) {
            addCriterion("ORDERED <=", new Long(value), "ordered");
            return this;
        }

        public Criteria andOrderedIn(long[] values) {
            addCriterion("ORDERED IN", values, "ordered");
            return this;
        }

        public Criteria andOrderedIn(List<Long> values) {
            addCriterion("ORDERED IN", values, "ordered");
            return this;
        }

        public Criteria andOrderedNotIn(long[] values) {
            addCriterion("ORDERED NOT IN", values, "ordered");
            return this;
        }

        public Criteria andOrderedNotIn(List<Long> values) {
            addCriterion("ORDERED NOT IN", values, "ordered");
            return this;
        }

        public Criteria andOrderedBetween(long value1, long value2) {
            addCriterion("ORDERED BETWEEN", new Long(value1), new Long(value2), "ordered");
            return this;
        }

        public Criteria andOrderedNotBetween(long value1, long value2) {
            addCriterion("ORDERED NOT BETWEEN", new Long(value1), new Long(value2), "ordered");
            return this;
        }

        public Criteria andMenuPathIsNull() {
            addCriterion("MENU_PATH IS NULL");
            return this;
        }

        public Criteria andMenuPathIsNotNull() {
            addCriterion("MENU_PATH IS NOT NULL");
            return this;
        }

        public Criteria andMenuPathEqualTo(String value) {
            addCriterion("MENU_PATH =", value, "menuPath");
            return this;
        }

        public Criteria andMenuPathNotEqualTo(String value) {
            addCriterion("MENU_PATH <>", value, "menuPath");
            return this;
        }

        public Criteria andMenuPathGreaterThan(String value) {
            addCriterion("MENU_PATH >", value, "menuPath");
            return this;
        }

        public Criteria andMenuPathGreaterThanOrEqualTo(String value) {
            addCriterion("MENU_PATH >=", value, "menuPath");
            return this;
        }

        public Criteria andMenuPathLessThan(String value) {
            addCriterion("MENU_PATH <", value, "menuPath");
            return this;
        }

        public Criteria andMenuPathLessThanOrEqualTo(String value) {
            addCriterion("MENU_PATH <=", value, "menuPath");
            return this;
        }

        public Criteria andMenuPathLike(String value) {
            addCriterion("MENU_PATH LIKE", value, "menuPath");
            return this;
        }

        public Criteria andMenuPathNotLike(String value) {
            addCriterion("MENU_PATH NOT LIKE", value, "menuPath");
            return this;
        }

        public Criteria andMenuPathIn(String[] values) {
            addCriterion("MENU_PATH IN", values, "menuPath");
            return this;
        }

        public Criteria andMenuPathIn(List<String> values) {
            addCriterion("MENU_PATH IN", values, "menuPath");
            return this;
        }

        public Criteria andMenuPathNotIn(String[] values) {
            addCriterion("MENU_PATH NOT IN", values, "menuPath");
            return this;
        }

        public Criteria andMenuPathNotIn(List<String> values) {
            addCriterion("MENU_PATH NOT IN", values, "menuPath");
            return this;
        }

        public Criteria andMenuPathBetween(String value1, String value2) {
            addCriterion("MENU_PATH BETWEEN", value1, value2, "menuPath");
            return this;
        }

        public Criteria andMenuPathNotBetween(String value1, String value2) {
            addCriterion("MENU_PATH NOT BETWEEN", value1, value2, "menuPath");
            return this;
        }

        public Criteria andRemarkIsNull() {
            addCriterion("REMARK IS NULL");
            return this;
        }

        public Criteria andRemarkIsNotNull() {
            addCriterion("REMARK IS NOT NULL");
            return this;
        }

        public Criteria andRemarkEqualTo(String value) {
            addCriterion("REMARK =", value, "remark");
            return this;
        }

        public Criteria andRemarkNotEqualTo(String value) {
            addCriterion("REMARK <>", value, "remark");
            return this;
        }

        public Criteria andRemarkGreaterThan(String value) {
            addCriterion("REMARK >", value, "remark");
            return this;
        }

        public Criteria andRemarkGreaterThanOrEqualTo(String value) {
            addCriterion("REMARK >=", value, "remark");
            return this;
        }

        public Criteria andRemarkLessThan(String value) {
            addCriterion("REMARK <", value, "remark");
            return this;
        }

        public Criteria andRemarkLessThanOrEqualTo(String value) {
            addCriterion("REMARK <=", value, "remark");
            return this;
        }

        public Criteria andRemarkLike(String value) {
            addCriterion("REMARK LIKE", value, "remark");
            return this;
        }

        public Criteria andRemarkNotLike(String value) {
            addCriterion("REMARK NOT LIKE", value, "remark");
            return this;
        }

        public Criteria andRemarkIn(String[] values) {
            addCriterion("REMARK IN", values, "remark");
            return this;
        }

        public Criteria andRemarkIn(List<String> values) {
            addCriterion("REMARK IN", values, "remark");
            return this;
        }

        public Criteria andRemarkNotIn(String[] values) {
            addCriterion("REMARK NOT IN", values, "remark");
            return this;
        }

        public Criteria andRemarkNotIn(List<String> values) {
            addCriterion("REMARK NOT IN", values, "remark");
            return this;
        }

        public Criteria andRemarkBetween(String value1, String value2) {
            addCriterion("REMARK BETWEEN", value1, value2, "remark");
            return this;
        }

        public Criteria andRemarkNotBetween(String value1, String value2) {
            addCriterion("REMARK NOT BETWEEN", value1, value2, "remark");
            return this;
        }
    }
}